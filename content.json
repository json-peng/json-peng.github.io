{"meta":{"title":"狐狸F叔技术blog","subtitle":null,"description":null,"author":"狐狸F叔","url":"http://lpjworld.com"},"pages":[],"posts":[{"title":"mysql命令大全","slug":"14.cmd之mysql","date":"2019-12-12T02:35:15.030Z","updated":"2019-12-12T02:34:33.547Z","comments":true,"path":"2019/12/12/14.cmd之mysql/","link":"","permalink":"http://lpjworld.com/2019/12/12/14.cmd之mysql/","excerpt":"","text":"cmd之mysql1.0 mysql常用命令 1.1 cmd进退mysql命令： 12mysql -u 用户名 -P --进入mysqlquit或exit --退出mysql,不需要; 1.2 mysql通用命令： 1234567891011select version(); --查看mysql的版本号select user(); --显示用户名select now(); --显示当前时间show processlist; --查看mysql当前用户占用的连接数select current_date(); --查看mysql的当前日期show databases; --显示当前所有存在的数据库use 数据库名; --选择使用数据库,不需要;select database(); --显示当前选择的数据库show tables; --显示当前数据库中存在的表desc 表名;或describe 表名;或show columns from 表名; --显示表的结构select * from 表名; --显示表内容 2.0 mysql的curd基本命令2.1 数据库：1234create database 数据库名; --创建一个数据库show databases; --查看所有数据库use 数据库名; --选择使用数据库drop database 数据库名; --删除数据库 2.2 表操作：123456create table 表名 (列名 属性值，属性值);select * from 表名;insert into 表名 values (列值，列值);load data local infile &quot;路径/文件名&quot; into table 表名; --文本添加值update 表名 set 列名 = 列值, 列名 = 列值 where id = 值;delete from 表名 where id = 值; 2.3 表结构 :12345678910111213check table 表名; --检测表是否完好repair table 表名; --修复表alter table 旧表名 rename 新表名;desc 表名;或show columns from 表名;alter table 表名 add 字段 类型 其他; --增加字段alter table 表名 add 后字段名字段 类型 其他 after 前个字段名; --增加指定列字段alter table 表名 drop column 列名; --删除字段alter table 表名 change 前字段 后字段 属性名值 --修改字段名，必须要属性值alter table 表名 alter column drop default; --删除默认值alter table 表名 alter column set default 默认值; --修改默认值alter table 表名 modify 字段 属性值，其他 --修改字段属性alter table 表名 add primary key(字段名) --给字段添加primary keyalter table 表名 drop primary key; --删除primary key 2.4 表与表之间的关系(主外键关联)1alter table 主表名 add constraint fk_主外键别名 foreign key(主表内关联的外键id名称) reference 外表名(外表主键id) 3.0 数据的备份与恢复：12345678910111213141516171819check table 表名; --检测表是否完好repair table 表名; --修复表注意：导出数据得在cmd命令窗口进行，而不是mysql命令窗口命令行导出：1.导出某个数据库：mysqldump -u root -p 数据库名称 &gt; 路径\\导出名2.导出多个数据库：mysqldump -u root -p -database 数据库名，数据库名3.导出某个数据库的某个表：mysqldump -u root -p 数据库名 表名 &gt; 路径\\导出名注意：-d，只备份结构，不备份数据，也可以使用-no-data代替-d,效果一样mysqldump -u root -p -d 数据库名 &gt; 路径\\导出名命令行导入：1.未连接数据库时：mysql -h localhost -u root -p 数据库名 &lt; sqlFilePath(最后没有分号)2.已连接数据库时：source sqlFilePath(最后没有分号)","categories":[{"name":"数据库","slug":"数据库","permalink":"http://lpjworld.com/categories/数据库/"}],"tags":[{"name":"mysql","slug":"mysql","permalink":"http://lpjworld.com/tags/mysql/"}],"keywords":[{"name":"数据库","slug":"数据库","permalink":"http://lpjworld.com/categories/数据库/"}]},{"title":"重拾JavaScript关键点","slug":"重拾JavaScript关键点","date":"2019-12-03T08:54:46.675Z","updated":"2019-12-03T09:04:17.149Z","comments":true,"path":"2019/12/03/重拾JavaScript关键点/","link":"","permalink":"http://lpjworld.com/2019/12/03/重拾JavaScript关键点/","excerpt":"","text":"重拾JavaScript关键点概念：javaScript是一种轻量级，解释型或即时编译型的[编程语言]与HTML进行交互，执行标准是ECMAScript。 语法：对大小写敏感，函数和变量 空格：javaScript会忽略多余的空格，提高可读性 1var person = \"Hege\"; 数据类型：Symbol是ES6引入了一种新的原始数据类型，表示独一无二的值 12值类型：字符串（String）、数字(Number)、布尔(Boolean)、对空（Null）、未定义（Undefined）、Symbol。引用数据类型：对象(Object)、数组(Array)、函数(Function)。 函数：向未声明的JavaScript 变量分配值，该变量将自动作为window的一个属性。==可delete删除== 字符串：使用内置属性length来计算字符串的长度 特殊字符：反斜杠(\\)是一个转义字符，可转撇号，换行，引号，等其他特殊字符。 方法 描述 charAt() 返回指定索引位置的字符 charCodeAt() 返回指定索引位置字符的 Unicode 值 concat() 连接两个或多个字符串，返回连接后的字符串 fromCharCode() 将 Unicode 转换为字符串 indexOf() 返回字符串中检索指定字符第一次出现的位置 lastIndexOf() 返回字符串中检索指定字符最后一次出现的位置 localeCompare() 用本地特定的顺序来比较两个字符串 match() 找到一个或多个正则表达式的匹配 replace() 替换与正则表达式匹配的子串 search() 检索与正则表达式相匹配的值 slice() 提取字符串的片断，并在新的字符串中返回被提取的部分 split() 把字符串分割为子字符串数组 substr() 从起始索引号提取字符串中指定数目的字符 substring() 提取字符串中两个指定的索引号之间的字符 toLocaleLowerCase() 根据主机的语言环境把字符串转换为小写，只有几种语言（如土耳其语）具有地方特有的大小写映射 toLocaleUpperCase() 根据主机的语言环境把字符串转换为大写，只有几种语言（如土耳其语）具有地方特有的大小写映射 toLowerCase() 把字符串转换为小写 toString() 返回字符串对象值 toUpperCase() 把字符串转换为大写 trim() 移除字符串首尾空白 valueOf() 返回某个字符串对象的原始值 typeof：用typeof检测null返回是object 正则表达式： 12345678910111213141516171819search()方法用于检索字符串中子字符串，并返回子串的起始位置replace()方法用于在字符串中用一些字符替换另一些字符i 对大小写不敏感的匹配g 全局匹配查找所有匹配而非在找到第一个后停止m 执行多行匹配[abc] 查找括号之间的任何字符[0-9] 查找任何从0-9的数字(x|y) 查找任何以|分隔的选项\\d 查找数字\\s$ 匹配输入字符串的结尾位置() 标记子表达式的开始和结束位置* 匹配前面的0次或多次+ 匹配前面的一次或多次. 匹配除换行符\\n之外的任何单字符[ 标记一个中括号表达式的开始? 匹配前面的0次或一次\\ 转义字符^ 匹配输入字符串的开始位置，除非在方括号表达式中使用。 错误：可使用try-catch 变量提升：变量可以在使用后声明，也就是变量可以先使用再声明。 严格模式：”use strict”的目的是指定代码在严格条件下执行 123消除代码运行的一些不安全之处，保证代码运行的安全提高编译器效果，增加运行速度为未来新版本的JavaScript做好铺垫 let和const： 12let声明的变量只在let命令所在的代码块内有效const声明一个只读的常量，一旦声明，常量的值就不能改变 JSON： 12JSON.parse() 用于将一个JSON字符串转换为JavaScript对象JSON.stringify() 用于将JavaScript值转换为JSON字符串 JavaScript:void(0)含义指定要计算一个表达式但是不返回值 1234href=\"#\"与href=\"javascript:void(0)\"的区别#包含了一个位置信息，默认的锚是#top也就是网页的上端而JavaScript:void(0)仅仅表示一个死链接。在页面很长的时候会使用#来定位页面的具体位置，格式为：#+id 帕斯卡拼写法(PascalCase)主要c语言 驼峰法：jQuery及其他JavaScript库都使用驼峰法 箭头函数: () =&gt; {函数声明} addEventListener()方法 addEventListener()方法用于向指定元素添加事件句柄。 addEventListener()方法添加的事件句柄不会覆盖已存在的事件句柄 element.addEventListener(event,function,useCapture) 事件冒泡或事件捕获: 1.在冒泡中，内部元素的事件会先触发，然后再触发外部元素 2.在捕获中，外部元素的事件会先被触发，然后才会触发内部元素的事件 123addEventListener(event,function,useCapture);addEventListener(event,function,false);默认值为false,即冒泡传递，当值为true时，事件使用捕获传递。 NodeList：是一个从文档中获取的节点列表(集合) 注意：节点列表不是一个数组！可通过索引获取元素但是无法使用数组的方法：valueOf，pop，push，join 注意：全局变量不能通过delete操作符删除，而window属性上定义的变量可以通过delete操作符进行删除 AJAX = 异步JavaScript和XML","categories":[{"name":"前端","slug":"前端","permalink":"http://lpjworld.com/categories/前端/"}],"tags":[{"name":"JS","slug":"JS","permalink":"http://lpjworld.com/tags/JS/"}],"keywords":[{"name":"前端","slug":"前端","permalink":"http://lpjworld.com/categories/前端/"}]},{"title":"blog小白搭建手册--hexo","slug":"09blog教程","date":"2019-10-19T08:04:54.694Z","updated":"2019-10-19T08:22:59.729Z","comments":true,"path":"2019/10/19/09blog教程/","link":"","permalink":"http://lpjworld.com/2019/10/19/09blog教程/","excerpt":"","text":"前言： 博主进行多方检索对比，发现目前博客平台有很多主要分为：社区类，个人类。 社区类主要有：CSDN，博客园，简书，码云这些托管平台，它们关注可以让笔者更好的关注与文章内容，但是这类平台具有对于文章内容进行限制并且会在个人页面上加上植入的各类广告，对于像博主这样的强逼症者，必须要让自己的页面保持简洁啦！:smiley: 所以更偏向于个人类博客：像WordPress,Zbolg，GitHub托管，像WordPress,Zbolg这类平台页面风格比较小清新，相对其他博客平台比较唯美，但是它们的搭建不仅需要耗费时间精力还必须耗费金钱去购买域名与服务器，还有定期维护，单就一个个人博客而言有过之而不及，综合以上考虑选择一款简洁，免费的平台，本文选择hexo主题，还有其他主题next，可自行搜索下载。 1.0 主题 Hexo Hiero JSimple BlueLake 1.1 Hexo搭建步骤 安装Git 安装Node.js 安装Hexo GitHub创建个人仓库 生成SSH添加到GitHub 对hexo进行页面设计排版 将hexo部署到GitHub 设置个人域名 发布 2.0 安装Git1git --version ##检查版本 3.0 安装Nodejs 直接使用Git Bash执行命令 4.0 安装Hexo1npm install -g hexo-cli ##安装hexo Step 1: 先在电脑盘符进行创建your_name.github.io 文件夹 Step 2: 在终端切换到 your_name.github.io 所在文件夹路径 Step 3: 由于默认的NPM镜像过慢，把源替换成淘宝的镜像，在终端执行命令 1npm config set registry \"https://registry.npm.taobao.org\" ##该切换是暂时的 Step 4: 根据Hexo进行一键式建站 12hexo initnpm install you_name.github.io 会生成如下目录 1234567.├── _config.yml ##网站大部分配置信息├── package.json ##插件信息├── scaffolds ##模板文件夹├── source | └── _posts ##用户提交的模板文件└── themes ##主题文件夹 Step 5：根据Hexo的官方文档进行下载hexo主题 1hexo server ##开启hexo服务,输入localhost:4000可看到生成的博客 5.0 GitHub创建个人仓库​ 5.1：Creating a repository ​ 登录GitHub账户并创建一个名为your_name.github.io 的repository，==your_name==为你的账户名。 ​ 5.2：Setting up Git ​ 告诉Git是谁提交的文件，及提交地址执行下列代码 12git config --global user.name \"your name\" ##your name是自己取的名字git config --global user.email \"your email address\" ##是自己的邮箱 ​ GitHub允许多人向一个Repo提交 ​ 5.3：Authenticating with GitHub from Git ​ 根据GitHub的官方文档 Generating a new SSH key 执行下列代码 1ssh-keygen -t rsa -b 4096 -C \"your_email@example.com\" ##your_email@example.com是GitHub注册邮箱 ​ 然后进行下一步下一步。 5.4：将SSH key添加到ssh-agent","categories":[{"name":"前端","slug":"前端","permalink":"http://lpjworld.com/categories/前端/"}],"tags":[{"name":"hexo","slug":"hexo","permalink":"http://lpjworld.com/tags/hexo/"}],"keywords":[{"name":"前端","slug":"前端","permalink":"http://lpjworld.com/categories/前端/"}]},{"title":"CMD常用命令","slug":"cmd常用命令","date":"2019-10-17T10:15:32.543Z","updated":"2019-10-18T01:45:12.239Z","comments":true,"path":"2019/10/17/cmd常用命令/","link":"","permalink":"http://lpjworld.com/2019/10/17/cmd常用命令/","excerpt":"","text":"1.0 帮助查看全部CMD指令 ​ help 1.1 查看ip​ ipconfig/all 1.2 返回上一级​ cd.. –返回上层 cd../.. 返回上两层 1.3 查看目录文件​ dir –类似linux下的ls dir/? – 查看隐藏文件 1.4 创建目录​ md 1.5 删除目录​ rd 1.6 测试网络是否畅通​ ping ip 1.7 删除文件​ del 1.8 复制文件​ copy 路径\\文件名 路径\\文件名 1.9 移动文件​ move 路径\\文件名 路径\\文件名 2.0 写入文件内容并创建文本文件​ echo 内容 &gt;&gt; 路径 2.1 查询并返回文本内容​ find “字符串” 文件名 2.1 打开资源管理库​ explorer 2.1 计算机管理​ compmgmt.msc 2.2 mstsc 远程桌面2.3 msconfig 自启项","categories":[{"name":"工具","slug":"工具","permalink":"http://lpjworld.com/categories/工具/"}],"tags":[{"name":"cmd","slug":"cmd","permalink":"http://lpjworld.com/tags/cmd/"}],"keywords":[{"name":"工具","slug":"工具","permalink":"http://lpjworld.com/categories/工具/"}]},{"title":"浏览器快捷键","slug":"浏览器快捷键","date":"2019-10-16T08:59:07.829Z","updated":"2019-12-03T08:56:18.312Z","comments":true,"path":"2019/10/16/浏览器快捷键/","link":"","permalink":"http://lpjworld.com/2019/10/16/浏览器快捷键/","excerpt":"","text":"浏览器快捷键 Ctrl+W 关闭当前页面 Ctrl+Shift+T 恢复关闭的页面 Ctrl+T 新建一个浏览页 Ctrl+N 新建一个浏览器窗口 Ctrl+Shift+N 新建一个隐私窗口 Ctrl+H 查看浏览历史 Ctrl+D 收藏页面 Ctrl+L 快速定位到地址栏 Ctrl+Tab 多个Tab页切换 Ctrl+R 刷新当前Tab页面 Ctrl+K 复制当前Tab页面 Ctrl+F 页面内搜索 Ctrl+P 将页面内容导出成PDF BackSpace 回到上一个页面 Ctrl+B 管理收藏夹","categories":[{"name":"工具","slug":"工具","permalink":"http://lpjworld.com/categories/工具/"}],"tags":[{"name":"CS","slug":"CS","permalink":"http://lpjworld.com/tags/CS/"}],"keywords":[{"name":"工具","slug":"工具","permalink":"http://lpjworld.com/categories/工具/"}]},{"title":"blog小白搭建手册","slug":"blog教程","date":"2019-10-15T09:31:08.758Z","updated":"2019-10-16T09:52:01.234Z","comments":true,"path":"2019/10/15/blog教程/","link":"","permalink":"http://lpjworld.com/2019/10/15/blog教程/","excerpt":"","text":"1.0 主题 Hexo Hiero JSimple BlueLake 1.1 Hexo搭建步骤 安装Git 安装Node.js 安装Hexo GitHub创建个人仓库 生成SSH添加到GitHub 对hexo进行页面设计排版 将hexo部署到GitHub 设置个人域名 发布 2.0 安装Git1git --version ##检查版本 3.0 安装Nodejs 直接使用Git Bash执行命令 4.0 安装Hexo1npm install -g hexo-cli ##安装hexo Step 1: 先在电脑盘符进行创建your_name.github.io 文件夹 Step 2: 在终端切换到 your_name.github.io 所在文件夹路径 Step 3: 由于默认的NPM镜像过慢，把源替换成淘宝的镜像，在终端执行命令 1npm config set registry \"https://registry.npm.taobao.org\" ##该切换是暂时的 Step 4: 根据Hexo进行一键式建站 12hexo initnpm install you_name.github.io 会生成如下目录 1234567.├── _config.yml ##网站大部分配置信息├── package.json ##插件信息├── scaffolds ##模板文件夹├── source | └── _posts ##用户提交的模板文件└── themes ##主题文件夹 Step 5：根据Hexo的官方文档进行下载hexo主题 1hexo server ##开启hexo服务,输入localhost:4000可看到生成的博客 5.0 GitHub创建个人仓库5.1：Creating a repository 登录GitHub账户并创建一个名为your_name.github.io 的repository，==your_name==为你的账户名。 5.2：Setting up Git 告诉Git是谁提交的文件，及提交地址执行下列代码 12git config --global user.name \"your name\" ##your name是自己取的名字git config --global user.email \"your email address\" ##是自己的邮箱 GitHub允许多人向一个Repo提交 5.3：Authenticating with GitHub from Git 根据GitHub的官方文档 Generating a new SSH key 执行下列代码 1ssh-keygen -t rsa -b 4096 -C \"your_email@example.com\" ##your_email@example.com是GitHub注册邮箱 然后进行下一步下一步。 5.4：将SSH key添加到ssh-agent","categories":[{"name":"前端","slug":"前端","permalink":"http://lpjworld.com/categories/前端/"}],"tags":[{"name":"hexo","slug":"hexo","permalink":"http://lpjworld.com/tags/hexo/"}],"keywords":[{"name":"前端","slug":"前端","permalink":"http://lpjworld.com/categories/前端/"}]},{"title":"Typora基本操作","slug":"typora指南","date":"2019-10-12T06:23:27.519Z","updated":"2019-10-15T00:18:51.417Z","comments":true,"path":"2019/10/12/typora指南/","link":"","permalink":"http://lpjworld.com/2019/10/12/typora指南/","excerpt":"","text":"Typora基本操作Markdown常用快捷键加粗： Ctrl/B 加粗 标题： Ctrl/H 可查找标题内容并进行替换 插入链接：Ctrl/K 百度一下 1[链接](http://example.com/ \"标题\") 插入代码： Ctrl/Shift/C 插入图片： Ctrl/Shift/I ![图片](C:\\Users\\Administrator\\Pictures\\Saved Pictures\\01.jpg “图片标题”) 撤销： Ctrl/Z 一级标题： 快捷键为 Ctrl+1 ,以此类推 倾斜： Ctrl/I 倾斜 下划线： Ctrl+U 下划线 删除线： 删除线 Alt+Shift+5 分割线： ***或者--- 注释 [^注释的内容] 中国[^1] 表情： :单词 :smile: 下标 H2o 1H~2~O 上标 X^2^ 1X^2^ 高亮 ==高亮== 1==高亮== 视频 1&lt;video src=\"xxx.mp4\"&gt; 转义 加\\ 进行转义字符 快元素引用文字 &gt; + 空格 + 引用文字 任务列表 - [] 不勾选 - [x] 勾选 退出Shift/tab 数学表达式 $$ $$ $$ 表 ||||First Header|Second Header| First Header Second Header %c 字符 %d 有符号十进制 %% 输出字符% %p 指针 https://www.52pojie.cn/thread-349073-1-1.html","categories":[{"name":"前端","slug":"前端","permalink":"http://lpjworld.com/categories/前端/"}],"tags":[{"name":"Webstrorm","slug":"Webstrorm","permalink":"http://lpjworld.com/tags/Webstrorm/"}],"keywords":[{"name":"前端","slug":"前端","permalink":"http://lpjworld.com/categories/前端/"}]},{"title":"Hello World","slug":"hello-world","date":"2019-10-12T02:01:18.453Z","updated":"2019-10-16T09:38:33.926Z","comments":true,"path":"2019/10/12/hello-world/","link":"","permalink":"http://lpjworld.com/2019/10/12/hello-world/","excerpt":"","text":"Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post1$ hexo new \"My New Post\" More info: Writing Run server1$ hexo server More info: Server Generate static files1$ hexo generate More info: Generating Deploy to remote sites1$ hexo deploy More info: Deployment","categories":[{"name":"后端","slug":"后端","permalink":"http://lpjworld.com/categories/后端/"}],"tags":[{"name":"Markdown","slug":"Markdown","permalink":"http://lpjworld.com/tags/Markdown/"}],"keywords":[{"name":"后端","slug":"后端","permalink":"http://lpjworld.com/categories/后端/"}]}]}